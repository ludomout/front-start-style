/*------------------------------------
  #HELPERS
------------------------------------*/
/* Visibility */
@mixin visible {
  visibility: visible;
  opacity   : 1;
}
@mixin hidden {
  visibility: hidden;
  opacity   : 0;
}
@mixin fadeIn($duration: .3) {
  transition: opacity $duration + s, visibility $duration + s;
}
/*  Create blocks ((rounded)square / (rounded)rectangle , circle) */
@mixin size($width, $height: $width, $border-radius: null) {
  width : $width;
  height: $height;
  @if ($border-radius != null) {
    border-radius: $border-radius;
  }
}
@mixin circle($width, $height: $width) {
  @include size($width, $height);
  border-radius: 50%;
}
/* rem calc */
@function rem($size) {
  @return ($size / $base-font-size) * 1rem;
}
/* Clearfix */
@mixin clearfix {
  &:after,
  &:before {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}
/* Positioning element */
@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  @if ($top == null) and ($right == null) and ($bottom == null) and ($left == null) {
    top   : 0;
    right : 0;
    bottom: 0;
    left  : 0;
  } @else {
    top   : $top;
    right : $right;
    bottom: $bottom;
    left  : $left;
  }
}
/* Center element */
@mixin center($xy:xy) {
  @if $xy == xy {
    left     : 50%;
    top      : 50%;
    bottom   : auto;
    right    : auto;
    transform: translateX(-50%) translateY(-50%);
  } @else 
  if $xy == x {
    left     : 50%;
    right    : auto;
    transform: translateX(-50%);
  } @else 
  if $xy == y {
    top      : 50%;
    bottom   : auto;
    transform: translateY(-50%);
  } @else 
  if $xy == flex {
    justify-content: center;
    align-items    : center;
  } @else 
  if $xy == block {
    display     : block;
    margin-left : auto;
    margin-right: auto;
  }
}
/* Retina image@2x */
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size : $width $height;
  }
}
/* Generate black/white alpha */
@function black($opacity) {
  @return rgba(0, 0, 0, $opacity);
}
@function white($opacity) {
  @return rgba(255, 255, 255, $opacity);
}
/* Truncate text */
@mixin truncate-text($overflow: ellipsis) {
  overflow     : hidden;
  white-space  : nowrap;
  text-overflow: $overflow;
}
/* Generate triangle */
@mixin triangle($direction, $size: 6px, $color: #222) {
  content : '';
  display : block;
  position: absolute;
  height  : $height;
  width   : $width;
  @if ($direction == 'up') {
    border-bottom: $size solid $color;
    border-left  : $size solid transparent;
    border-right : $size solid transparent;
    left         : 50%;
    transform    : translateX(-50%);
  } @else 
  if ($direction == 'down') {
    border-top  : $size solid $color;
    border-left : $size solid transparent;
    border-right: $size solid transparent;
    left        : 50%;
    transform   : translateX(-50%);
  } @else 
  if ($direction == 'left') {
    border-top   : $size solid transparent;
    border-bottom: $size solid transparent;
    border-right : $size solid $color;
  } @else 
  if ($direction == 'right') {
    border-top   : $size solid transparent;
    border-bottom: $size solid transparent;
    border-left  : $size solid $color;
  }
}
/* Fonts */
@mixin font-size($size) {
  @if unitless($size) {
    $size: $size * 1px;
  }
  font-size: $size;
  font-size: ($size / $base-font-size) * 1rem;
}
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src        : url($file-name + '.woff2') format('woff2'), url($file-name + '.woff') format('woff');
    font-weight: $weight;
    font-style : $style;
  }
}
@mixin font-smoothing {
  -webkit-font-smoothing : antialiased;
  -moz-osx-font-smoothing: grayscale;
}
/*------------------------------------
  #BUTTONS
------------------------------------*/
/* Create size buttons */
@mixin button-size($sizes) {
  @each $type, $properties in $sizes {
    .btn--#{$type} {
      @each $prop, $value in $properties {
        #{$prop}: $value;
      }
    }
  }
}
/* Create color buttons */
@mixin button-color($colors) {
  @each $type, $properties in $colors {
    .btn--#{$type} {
      @each $prop, $value in $properties {
        #{$prop}: $value;
      }
    }
  }
}
/*------------------------------------
  #GRID
------------------------------------*/
/* Responsive breakpoint */
$screen-mobile: 320px !default;
$screen-tablet: 768px !default;
$screen-desktop: 992px !default;
$screen-large-desktop: 1200px !default;
@mixin MQ($point) {
  @if $point == large {
    @media (min-width: $screen-large-desktop) {
      @content;
    }
  } @else 
  if $point == medium {
    @media (min-width: $screen-desktop) {
      @content;
    }
  } @else 
  if $point == small {
    @media (min-width: $screen-tablet) {
      @content;
    }
  } @else 
  if $point == xsmall {
    @media (min-width: $screen-mobile + 1px) {
      @content;
    }
  }
}
@mixin MQ-max($point) {
  @if $point == large {
    @media (max-width: $screen-large-desktop - 1) {
      @content;
    }
  } @else 
  if $point == medium {
    @media (max-width: $screen-desktop - 1) {
      @content;
    }
  } @else 
  if $point == small {
    @media (max-width: $screen-tablet - 1) {
      @content;
    }
  }
}
/* Make container */
@mixin container-fixed($gutter: $grid-gutter-width) {
  margin-right : auto;
  margin-left  : auto;
  padding-left : ($gutter / 2);
  padding-right: ($gutter / 2);
  @include clearfix();
}
@mixin make-row($gutter: $grid-gutter-width) {
  margin-left : ceil(($gutter / -2));
  margin-right: floor(($gutter / -2));
  @include clearfix;
}
/* Make grid columns */
@mixin make-grid-columns($i: 1, $list: ".col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
  }

  #{$list} {
    position     : relative;
    min-height   : 1px;
    padding-left : ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}
@mixin float-grid-columns($class, $i: 1, $list: ".col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .col-#{$class}-#{$i}";
  }

  #{$list} {
    float: left;
  }
}
@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index > 0) {
    .col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }
  @if ($type == push) and ($index == 0) {
    .col-#{$class}-push-0 {
      left: auto;
    }
  }
  @if ($type == pull) and ($index > 0) {
    .col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }
  @if ($type == pull) and ($index == 0) {
    .col-#{$class}-pull-0 {
      right: auto;
    }
  }
  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}
@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}
@mixin make-grid($class) {
  @include float-grid-columns($class);
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, pull);
  @include loop-grid-columns($grid-columns, $class, push);
  @include loop-grid-columns($grid-columns, $class, offset);
}
